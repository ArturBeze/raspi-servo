import serial
import serial.tools.list_ports
import time

class ServoController:
    def __init__(self, baudrate=115200, timeout=2):
        self.ser = None
        self.baudrate = baudrate
        self.timeout = timeout
        self.port = self._auto_detect_port()
        self._connect()

    def _auto_detect_port(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ—Ä—Ç Arduino."""
        ports = serial.tools.list_ports.comports()
        for port in ports:
            if 'Arduino' in port.description or 'usbmodem' in port.device or 'ttyACM' in port.device:
                return port.device
        raise IOError("‚ùå Arduino –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–¥–∫–ª—é—á–∏ –ø–ª–∞—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

    def _connect(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Arduino."""
        self.ser = serial.Serial(self.port, self.baudrate, timeout=self.timeout)
        time.sleep(2)  # –¥–∞–µ–º –ê—Ä–¥—É–∏–Ω–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {self.port}")

    def set_x(self, angle):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É–≥–æ–ª –ø–æ –æ—Å–∏ X (0‚Äì180)."""
        self._send_command(f"X:{int(angle)}")

    def set_y(self, angle):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É–≥–æ–ª –ø–æ –æ—Å–∏ Y (0‚Äì90)."""
        self._send_command(f"Y:{int(angle)}")

    def _send_command(self, command):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ Arduino –∏ —á—Ç–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞."""
        if not self.ser or not self.ser.is_open:
            raise ConnectionError("‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Arduino –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        
        self.ser.write((command + "\n").encode())
        response = self.ser.readline().decode().strip()
        if response:
            print(f"üì® –û—Ç–≤–µ—Ç: {response}")

    def get_status(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (X=.., Y=..)."""
        if self.ser and self.ser.in_waiting:
            return self.ser.readline().decode().strip()
        return None

    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."""
        if self.ser and self.ser.is_open:
            self.ser.close()
            print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Arduino –∑–∞–∫—Ä—ã—Ç–æ.")

"""
#include <Servo.h>

Servo servoX;
Servo servoY;

int posX = 90;  // —Å—Ç–∞—Ä—Ç X
int posY = 45;  // —Å—Ç–∞—Ä—Ç Y

void setup() {
  servoX.attach(9);
  servoY.attach(10);
  servoX.write(posX);
  servoY.write(posY);
  Serial.begin(115200);
}

void loop() {
  if (Serial.available() > 0) {
    String command = Serial.readStringUntil('\n');
    command.trim();

    if (command.startsWith("X:")) {
      int value = command.substring(2).toInt();
      value = constrain(value, 0, 180);
      servoX.write(value);
      posX = value;
      Serial.print("X=");
      Serial.println(posX);
    } 
    else if (command.startsWith("Y:")) {
      int value = command.substring(2).toInt();
      value = constrain(value, 0, 90);
      servoY.write(value);
      posY = value;
      Serial.print("Y=");
      Serial.println(posY);
    }
  }
}
"""
